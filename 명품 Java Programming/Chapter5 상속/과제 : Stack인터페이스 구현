package Chapter7;
import java.util.*;

interface Stack{
	int length();
	int capacity();
	String pop();
	boolean push(String val);
}

class StringStack implements Stack{
	String[] stack;
	int size, top;

	public StringStack(int size) {
		this.size = size;
		this.stack = new String[this.size];
		this.top = -1;
	}

	@Override
	public int length() {
		return this.top+1;
	}

	@Override
	public int capacity() {
		return this.size - (this.top+1);
	}

	@Override
	public String pop() {
		return this.stack[this.top--];
	}

	@Override
	public boolean push(String val) {
		if(capacity() > 0) {
			this.stack[++this.top] = val;
			return true;
		} else {
			System.out.println("스택이 꽉 차서 푸시 불가!");
			return false;
		}
	}
}

public class StackApp {
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		System.out.print("총 스택 저장 공간의 크기 입력 >> ");
		int num = sc.nextInt();
		
		StringStack stack = new StringStack(num);
		
		while(true) {
			System.out.print("문자열 입력 >> ");
			String input = sc.next();
			
			if(input.equals("그만"))
				break;
			stack.push(input);
		}
		
		System.out.print("스택에 저장된 모든 문자열 팝 : ");
		for(int i=0; i<num; i++) {
			System.out.print(stack.pop()+" ");
		}
	}
}



